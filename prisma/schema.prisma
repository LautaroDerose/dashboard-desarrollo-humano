// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE2_URL")
}

model BenefitCategory {
  id      Int       @id @default(autoincrement())
  name    String
  Benefit Benefit[]
}

model Benefit {
  id          Int             @id @default(autoincrement())
  name        String
  category    BenefitCategory @relation(fields: [category_id], references: [id])
  category_id Int
  is_active   Boolean         @default(true)
  Assignment  Assignment[]
}

model Recipient {
  id                        Int                        @id @default(autoincrement())
  first_name                String
  last_name                 String
  birth_date                DateTime
  dni                       Int                        @unique
  sex                       String
  enrollment_date           DateTime
  is_active                 Boolean
  family_group_id           Int?
  family_group              FamilyGroup?               @relation(fields: [family_group_id], references: [id])
  contact_info              ContactInfo?
  recipientSocialConditions RecipientSocialCondition[]
  Assignment                Assignment[]
  observations              Observation[]
}

model Observation {
  id           Int       @id @default(autoincrement())
  author       String
  text         String
  subject      String
  created_at   DateTime  @default(now())
  is_active    Boolean

  recipient_id Int
  recipient    Recipient @relation(fields: [recipient_id], references: [id])
  assignment_id Int        
  assignment    Assignment @relation(fields: [assignment_id], references: [id])
}

model FamilyGroup {
  id        Int         @id @default(autoincrement())
  Recipient Recipient[]
}

model ContactInfo {
  id            Int       @id @default(autoincrement())
  recipient_id  Int       @unique
  phone         Int
  email         String
  street_id     Int
  street_number String
  locality_id   Int
  recipient     Recipient @relation(fields: [recipient_id], references: [id])
  street        Street    @relation(fields: [street_id], references: [id])
  locality      Locality  @relation(fields: [locality_id], references: [id])
}

model SocialCondition {
  id                        Int                        @id @default(autoincrement())
  name                      String
  gravity                   String
  type                      String
  recipientSocialConditions RecipientSocialCondition[]
}

model RecipientSocialCondition {
  id                  Int             @id @default(autoincrement())
  recipient_id        Int
  social_condition_id Int
  recipient           Recipient       @relation(fields: [recipient_id], references: [id])
  social_condition    SocialCondition @relation(fields: [social_condition_id], references: [id])
}

model Locality {
  id          Int           @id @default(autoincrement())
  name        String
  ContactInfo ContactInfo[]
  Street      Street[]
}

model Street {
  id          Int           @id @default(autoincrement())
  name        String
  locality    Locality      @relation(fields: [locality_id], references: [id])
  locality_id Int
  ContactInfo ContactInfo[]
}

model SubsidyStage {
  id            Int        @id @default(autoincrement())
  assignment_id Int        @unique
  assignment    Assignment @relation(fields: [assignment_id], references: [id])

  created_at DateTime @default(now())

  // Relación con los documentos
  note_doc    Doc? @relation("NoteDoc", fields: [note_doc_id], references: [id])
  decree_doc  Doc? @relation("DecreeDoc", fields: [decree_doc_id], references: [id])
  expense_doc Doc? @relation("ExpenseDoc", fields: [expense_doc_id], references: [id])
  payment_doc Doc? @relation("PaymentDoc", fields: [payment_doc_id], references: [id])
  check_doc   Doc? @relation("CheckDoc", fields: [check_doc_id], references: [id])

  // IDs de documentos
  note_doc_id    Int? @unique
  decree_doc_id  Int? @unique
  expense_doc_id Int? @unique
  payment_doc_id Int? @unique
  check_doc_id   Int? @unique

  // Estado general de confirmación
  all_confirmed_data DateTime?
  Doc                Doc[]
}

model Doc {
  id             Int          @id @default(autoincrement())
  doc_type       DocumentType
  doc_number     String
  doc_created_at DateTime     @default(now())
  is_confirm     Boolean      @default(false)
  confirmed_at   DateTime?

  // Relación con SubsidyStage
  subsidy_stage_id Int?
  subsidy_stage    SubsidyStage? @relation(fields: [subsidy_stage_id], references: [id])

  // Relación directa con Assignment
  assignment_id Int?
  assignment    Assignment? @relation(fields: [assignment_id], references: [id])

  // Relaciones inversas
  note_subsidy_stage    SubsidyStage? @relation("NoteDoc")
  decree_subsidy_stage  SubsidyStage? @relation("DecreeDoc")
  expense_subsidy_stage SubsidyStage? @relation("ExpenseDoc")
  payment_subsidy_stage SubsidyStage? @relation("PaymentDoc")
  check_subsidy_stage   SubsidyStage? @relation("CheckDoc")
}

enum DocumentType {
  NOTE_DOC
  DECREE_DOC
  EXPENSE_DOC
  PAYMENT_RECEIPT_DOC
  CHECK_DOC
}

model HospitalCredential {
  id            Int        @id @default(autoincrement())
  assignment_id Int        @unique
  assignment    Assignment @relation(fields: [assignment_id], references: [id])

  // Información de la trabajadora social
  ts_name String

  // Información de la visita
  visiting_shift String?  // Turno de la visita (mañana, tarde, noche)
  visit_date     DateTime? @db.Date // Fecha de la visita
  visit_status   String?   // Estado de la visita (realizada, reprogramada, no se encontró al recipient, otro)
  visit_confirm  Boolean?  // Constancia de que el ususario confirmo la fecha y horario de visita

  // Informe socioeconómico
  report_soc_eco_issued    Boolean?  // Indica si se completó la visita y el informe socioeconómico (emitido por TS)
  report_soc_eco_issue_date DateTime? // Fecha de emisión del informe socioeconómico

  // Secretaría
  report_soc_eco_received    Boolean?  // Indica si la secretaria recibió el informe socioeconómico
  report_soc_eco_receive_date DateTime? // Fecha de recepción del informe socioeconómico

  // Credencial
  credential_number Int?   // Número de credencial asignado si se aprueba
}

model WaterSubsidy {
  id            Int        @id @default(autoincrement())
  assignment_id Int        @unique
  assignment    Assignment @relation(fields: [assignment_id], references: [id])

  // Información de la factura de agua
  supply_number String // Número de la factura de agua
  supply_value  Float // Valor total de la factura

  // Información del período de pago
  // payment_due_date DateTime? // Fecha de vencimiento de la factura
  period String? // Alternativa: Periodo del pago (por ejemplo, "Julio 2024")

  // Valor de la asignación/cuota de pago
  value_assignment Float // Valor asignado manualmente para cubrir la factura
}
model Assignment {
  id              Int       @id @default(autoincrement())
  benefit_id      Int
  detail_benefit  String?
  recipient_id    Int
  quantity        Int?
  amount          Int?
  status          String?
  enrollment_date DateTime?
  expiry_date     DateTime?
  withdrawal_date DateTime?
  benefit         Benefit   @relation(fields: [benefit_id], references: [id])
  recipient       Recipient @relation(fields: [recipient_id], references: [id])

  // Relación con SubsidyStage
  subsidy_stage SubsidyStage?

  // Relación directa con Docs
  docs               Doc[]
  HospitalCredential HospitalCredential?
  WaterSubsidy       WaterSubsidy?
  TravelSubsidy      TravelSubsidy[]
  Observation        Observation[]
}

// model TravelSubsidy {
//   id            Int        @id @default(autoincrement())
//   assignment_id Int        
//   assignment    Assignment @relation(fields: [assignment_id], references: [id])

//   // Información del viaje
//   destination  String // Destino del viaje (constante)
//   // Información de la fecha y dirección del viaje
//   date      DateTime // Fecha del viaje
//   direction String // Dirección del viaje: ida o vuelta

//   // Información del pasajero
//   passenger_type String // Enum para determinar si es pasajero principal o acompañante
//   name           String // Nombre del pasajero
//   dni            Int // DNI del pasajero
//   // Monto por pasaje
//   amount       Float // Monto del subsidio por pasaje

//   provider     String // Empresa proveedora del viaje  
// }

model TravelSubsidy {
  id            Int        @id @default(autoincrement())
  assignment_id Int        
  assignment    Assignment @relation(fields: [assignment_id], references: [id])

  // Información del viaje (Tique 1)
  destination1    String
  date1           DateTime
  passenger_type1 String
  name1           String
  dni1            Int
  amount1         Float
  provider1       String

  // Información del viaje (Tique 2)
  destination2    String?
  date2           DateTime?
  passenger_type2 String?
  name2           String?
  dni2            Int?
  amount2         Float?
  provider2       String?

  // Información del viaje (Tique 3)
  destination3    String?
  date3           DateTime?
  passenger_type3 String?
  name3           String?
  dni3            Int?
  amount3         Float?
  provider3       String?

  // Información del viaje (Tique 4)
  destination4    String?
  date4           DateTime?
  passenger_type4 String?
  name4           String?
  dni4            Int?
  amount4         Float?
  provider4       String?
}


// model RiskFactor {
//   id           Int       @id @default(autoincrement())
//   name         String
//   gravity      String
//   type         String
//   recipient_id Int
//   // recipient    Recipient @relation(fields: [recipient_id], references: [id])
// }

//Modificar para que solo traiga un ContactInfo
// risk_factors      RiskFactor[]

enum Role {
  user
  admin
  subsecretaria
  contaduria
  tesoreria
  caja
  trabajador_social
  secretaria_dh
  provedor
}

model User {
  id       String  @id @default(cuid())
  name     String?
  username String? @unique
  email    String? @unique
  // emailVerified DateTime?
  password String?
  image    String?
  // Account       Account?
  role     Role    @default(user)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String  @unique
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String? @db.Text
//   access_token             String? @db.Text
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String? @db.Text
//   session_state            String?
//   refresh_token_expires_in Int?
//   user                     User?   @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model VerificationToken {
//   identifier String  @unique
//   token      String
//   expires    DateTime

//   @@id([identifier])
// }
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
